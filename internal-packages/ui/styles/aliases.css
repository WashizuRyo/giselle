@layer utilities {
	/*
    aliases.css (Phase 1: v3 bridge, non-breaking)

    - Provides minimal utility aliases that map to semantic CSS variables.
    - Safe under Tailwind v3 and prepares for Tailwind v4 token usage.
    - Does NOT override existing v2 variables. Uses graceful fallbacks to current theme vars.
    - Temporary: remove after full migration to v4 tokens + semantic utilities.
  */

	/* Text */
	.text-text {
		color: var(--color-text) !important;
	}
	.text-inverse {
		color: var(--color-text-inverse, var(--color-white, #fff)) !important;
	}
	/* Hover variants (limited set for migration) */
	.hover\:text-text:hover {
		color: var(--color-text) !important;
	}
	.hover\:text-inverse:hover {
		color: var(--color-text-inverse, var(--color-white, #fff)) !important;
	}

	/* Focus and active variants (limited set for migration) */
	.focus\:text-text:focus {
		color: var(--color-text) !important;
	}
	.focus\:text-inverse:focus {
		color: var(--color-text-inverse, var(--color-white, #fff)) !important;
	}
	.active\:text-text:active {
		color: var(--color-text) !important;
	}
	.active\:text-inverse:active {
		color: var(--color-text-inverse, var(--color-white, #fff)) !important;
	}

	/* Hover opacity variants (limited set for migration) */
	.hover\:text-text\/20:hover {
		color: color-mix(in srgb, var(--color-text) 20%, transparent) !important;
	}
	.hover\:text-text\/40:hover {
		color: color-mix(in srgb, var(--color-text) 40%, transparent) !important;
	}
	.hover\:text-text\/60:hover {
		color: color-mix(in srgb, var(--color-text) 60%, transparent) !important;
	}
	.hover\:text-text\/80:hover {
		color: color-mix(in srgb, var(--color-text) 80%, transparent) !important;
	}
	.hover\:text-inverse\/20:hover {
		color: color-mix(
			in srgb,
			var(--color-text-inverse, var(--color-white, #fff)) 20%,
			transparent
		) !important;
	}
	.hover\:text-inverse\/40:hover {
		color: color-mix(
			in srgb,
			var(--color-text-inverse, var(--color-white, #fff)) 40%,
			transparent
		) !important;
	}
	.hover\:text-inverse\/60:hover {
		color: color-mix(
			in srgb,
			var(--color-text-inverse, var(--color-white, #fff)) 60%,
			transparent
		) !important;
	}
	.hover\:text-inverse\/80:hover {
		color: color-mix(
			in srgb,
			var(--color-text-inverse, var(--color-white, #fff)) 80%,
			transparent
		) !important;
	}

	/* Opacity variants for text-text */
	.text-text\/20 {
		color: color-mix(in srgb, var(--color-text) 20%, transparent) !important;
	}
	.text-text\/40 {
		color: color-mix(in srgb, var(--color-text) 40%, transparent) !important;
	}
	.text-text\/60 {
		color: color-mix(in srgb, var(--color-text) 60%, transparent) !important;
	}
	.text-text\/80 {
		color: color-mix(in srgb, var(--color-text) 80%, transparent) !important;
	}

	/* Backgrounds */
	.bg-surface {
		/* prefer semantic --color-surface; fallback to current v2 vars */
		background-color: var(
			--color-surface,
			var(--color-surface-background, var(--color-background))
		) !important;
	}
	.bg-bg {
		background-color: var(--color-bg, var(--color-background)) !important;
	}

	/* Text from semantic background tokens */
	.text-bg {
		color: var(--color-bg, var(--color-background)) !important;
	}
	.bg-inverse {
		background-color: var(--color-text-inverse, var(--color-white, #fff)) !important;
	}
	.bg-inverse\/5 {
		background-color: color-mix(
			in srgb,
			var(--color-text-inverse, var(--color-white, #fff)) 5%,
			transparent
		) !important;
	}
	.bg-inverse\/10 {
		background-color: color-mix(
			in srgb,
			var(--color-text-inverse, var(--color-white, #fff)) 10%,
			transparent
		) !important;
	}
	.bg-inverse\/15 {
		background-color: color-mix(
			in srgb,
			var(--color-text-inverse, var(--color-white, #fff)) 15%,
			transparent
		) !important;
	}
	.bg-inverse\/20 {
		background-color: color-mix(
			in srgb,
			var(--color-text-inverse, var(--color-white, #fff)) 20%,
			transparent
		) !important;
	}
	.bg-inverse\/30 {
		background-color: color-mix(
			in srgb,
			var(--color-text-inverse, var(--color-white, #fff)) 30%,
			transparent
		) !important;
	}

	/* Borders */
	.border-border {
		border-color: var(
			--color-border,
			var(--color-border-variant, var(--color-dark-border))
		) !important;
	}
	.border-border-muted {
		border-color: var(
			--color-border-muted,
			var(--color-light-border, var(--color-border))
		) !important;
	}

	/* Inverse border helpers (align to text-inverse) */
	.border-inverse {
		border-color: var(--color-text-inverse, var(--color-white, #fff)) !important;
	}
	.border-inverse\/20 {
		border-color: color-mix(
			in srgb,
			var(--color-text-inverse, var(--color-white, #fff)) 20%,
			transparent
		) !important;
	}

	/* Compatibility alias: keep existing class name working */
	.color-border-focused {
		border-color: var(--color-border-focused, var(--color-focused, #47679e)) !important;
	}

	/* Focus / Ring / Outline */
	.ring-focused {
		/* Tailwind v3 ring color hook */
		--tw-ring-color: var(--color-focused, var(--color-border-focused, #47679e)) !important;
	}
	.outline-focused {
		outline-color: var(--color-focused, var(--color-border-focused, #47679e)) !important;
	}

	/* SVG helpers */
	.fill-text {
		fill: var(--color-text) !important;
	}
	.stroke-border {
		stroke: var(
			--color-border,
			var(--color-border-variant, var(--color-dark-border))
		) !important;
	}

	/* Inverse background (migration helpers) */
	.bg-inverse {
		background-color: var(--color-text-inverse, var(--color-white, #fff)) !important;
	}
	.bg-inverse\/5 {
		background-color: color-mix(
			in srgb,
			var(--color-text-inverse, var(--color-white, #fff)) 5%,
			transparent
		) !important;
	}
	.bg-inverse\/10 {
		background-color: color-mix(
			in srgb,
			var(--color-text-inverse, var(--color-white, #fff)) 10%,
			transparent
		) !important;
	}

	/* Link muted explicit color */
	.text-link-muted {
		color: var(--color-link-muted) !important;
	}

	/* Placeholder variant for link-muted */
	.placeholder\:text-link-muted::placeholder {
		color: var(--color-link-muted) !important;
	}
}
