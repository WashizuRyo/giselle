import type { ActId, Generation } from "@giselle-sdk/giselle";
import { ArrowLeftIcon } from "lucide-react";
import Link from "next/link";
import { giselleEngine } from "@/app/giselle-engine";
import { Nav } from "./ui/nav";

export default async function ({
	children,
	params,
}: React.PropsWithChildren<{
	params: Promise<{ actId: ActId }>;
}>) {
	const { actId } = await params;
	const act = await giselleEngine.getAct({ actId });
	const generations: Generation[] = await Promise.all(
		act.sequences.flatMap((sequence) =>
			sequence.steps.map((step) =>
				giselleEngine.getGeneration(step.generationId, true),
			),
		),
	).then((genereations) =>
		genereations.filter((generation) => generation !== undefined),
	);
	return (
		<div className="bg-surface-background text-foreground h-screen flex font-sans">
			{/* Left Sidebar */}
			<aside className="w-[300px] flex flex-col pl-[24px] border-[2px] border-transparent my-[8px]">
				<div className="text-[12px] text-text-muted mb-[4px] pt-[16px]">
					<Link
						href="/stage"
						className="flex items-center gap-[2px] -ml-[12px]"
					>
						<ArrowLeftIcon className="size-[12px]" />
						<span>Back</span>
					</Link>
				</div>

				<div className="mb-[24px]">
					<h2>{act.name}</h2>
					{/* <div className="flex bg-secondary rounded-md p-1 text-sm">
							<button className="flex-1 text-muted-foreground py-1 px-2 rounded">
								Steps
							</button>
							<button className="flex-1 bg-card text-foreground py-1 px-2 rounded-md shadow-sm">
								Sources
							</button>
						</div> */}
				</div>

				<div className="flex-grow space-y-2 overflow-y-auto">
					{/* <div className="flex justify-between items-center px-2 py-1">
							<h3 className="text-xs font-medium text-muted-foreground uppercase tracking-wider">
								Files generated by the Agent
							</h3>
							<div className="flex items-center gap-2">
								<File size={14} className="text-muted-foreground" />
								<span className="text-xs font-semibold bg-secondary px-2 py-0.5 rounded-md">
									19
								</span>
							</div>
						</div> */}
					<Nav
						act={{
							...act,
							sequences: act.sequences
							// Skip the first sequence as it's always a Trigger node and doesn't need to be displayed
								.filter((_, index) => index > 0)
								.map((sequence) => ({
									...sequence,
									steps: sequence.steps
										.map((step) => {
											const generation = generations.find(
												(generation) => generation.id === step.generationId,
											);
											if (generation === undefined) {
												return null;
											}
											return {
												...step,
												generation,
											};
										})
										.filter((step) => step !== null),
								})),
						}}
					/>
				</div>

				{/* <div className="flex items-center justify-between p-2 border-t border-border">
					<div className="flex items-center gap-3">
						<img
							src="/placeholder.svg?width=40&height=40"
							alt="User Avatar"
							className="w-10 h-10 rounded-full"
						/>
						<div>
							<p className="font-semibold">toyamarinyon</p>
							<p className="text-xs text-muted-foreground">
								Subscription & Settings
							</p>
						</div>
					</div>
					<button
						type="button"
						className="bg-accent/20 text-accent text-xs font-bold py-1 px-3 rounded-full border border-accent"
					>
						TRIAL
					</button>
				</div> */}
			</aside>

			<main className="m-[8px] flex flex-1 border-[2px] border-border-variant rounded-[8px] bg-background overflow-hidden">
				{children}
			</main>
		</div>
	);
}
